name: Playwright Tests with Conditional Cloudflare

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.48.0-jammy
      options: --ipc=host
    
    outputs:
      cloudflare-rule-id: ${{ steps.create-rule.outputs.rule-id }}
      cloudflare-enabled: ${{ steps.create-rule.outputs.success }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install required tools
      run: apt-get update && apt-get install -y jq
    
    # ✅ SOLUTION 1: Step-level condition using env
    - name: Create Cloudflare whitelist rule
      id: create-rule
      if: ${{ env.CLOUDFLARE_API_TOKEN != '' }}
      uses: ./.github/actions/cloudflare-ip-rule
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      with:
        action: 'create'
        api-token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        zone-id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        notes: 'Playwright Tests - GitHub Actions'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run Playwright tests
      run: npx playwright test
      env:
        CI: true
    
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
    
    # ✅ Conditional cleanup - only if rule was created
    - name: Delete Cloudflare whitelist rule
      if: always() && steps.create-rule.outputs.rule-id
      uses: ./.github/actions/cloudflare-ip-rule
      with:
        action: 'delete'
        api-token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        zone-id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        rule-id: ${{ steps.create-rule.outputs.rule-id }}

  cleanup:
    if: always() && needs.test.outputs.cloudflare-rule-id
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Emergency cleanup
      uses: ./.github/actions/cloudflare-ip-rule
      with:
        action: 'delete'
        api-token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        zone-id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        rule-id: ${{ needs.test.outputs.cloudflare-rule-id }}