name: 'Github Runner IP Whitelister Cloudlfare'
description: 'Automatically manage Cloudflare IP access rules for CI/CD pipelines. Whitelist runner IPs to bypass Cloudflare protection during automated testing.'
author: 'DiyRex'

branding:
  icon: 'shield'
  color: 'orange'

inputs:
  action:
    description: 'Action to perform: create (whitelist IP) or delete (remove rule)'
    required: true
    default: 'create'
  
  api-token:
    description: 'Cloudflare API token with Zone:Firewall Services:Edit permission'
    required: true
  
  zone-id:
    description: 'Cloudflare Zone ID (found in dashboard sidebar)'
    required: true
  
  ip-address:
    description: 'IP address to manage (auto-detected if not provided)'
    required: false
  
  rule-id:
    description: 'Rule ID for delete action (output from create action)'
    required: false
  
  mode:
    description: 'Rule mode: whitelist (allow), block, challenge, js_challenge, managed_challenge'
    required: false
    default: 'whitelist'
  
  notes:
    description: 'Custom notes/description for the rule'
    required: false
    default: 'Automated rule from GitHub Actions'
  
  wait-time:
    description: 'Seconds to wait after creating rule for Cloudflare propagation'
    required: false
    default: '30'

outputs:
  rule-id:
    description: 'ID of the created/managed Cloudflare rule'
    value: ${{ steps.manage-rule.outputs.rule-id }}
  
  success:
    description: 'Whether the operation was successful (true/false)'
    value: ${{ steps.manage-rule.outputs.success }}
  
  ip-address:
    description: 'IP address that was managed by the action'
    value: ${{ steps.get-ip.outputs.ip-address || inputs.ip-address }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        echo "🔍 Validating Cloudflare IP Manager inputs..."
        
        if [ "${{ inputs.action }}" != "create" ] && [ "${{ inputs.action }}" != "delete" ]; then
          echo "❌ Invalid action: ${{ inputs.action }}. Must be 'create' or 'delete'"
          exit 1
        fi
        
        if [ "${{ inputs.action }}" = "create" ] && [ -z "${{ inputs.ip-address }}" ]; then
          echo "🌐 Will auto-detect IP address for create action"
        fi
        
        if [ "${{ inputs.action }}" = "delete" ] && [ -z "${{ inputs.rule-id }}" ]; then
          echo "❌ rule-id is required for delete action"
          exit 1
        fi
        
        echo "✅ Input validation passed"
    
    - name: Get runner IP address
      id: get-ip
      if: inputs.action == 'create' && inputs.ip-address == ''
      shell: bash
      run: |
        echo "🌐 Auto-detecting runner IP address..."
        
        IP=""
        for service in "https://ipinfo.io/ip" "https://icanhazip.com" "https://ident.me" "https://api64.ipify.org"; do
          echo "Trying $service..."
          IP=$(curl -s --max-time 10 "$service" 2>/dev/null | tr -d '\n\r' | grep -E '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$' || true)
          if [ -n "$IP" ]; then
            break
          fi
        done
        
        if [ -z "$IP" ]; then
          echo "❌ Failed to detect IP address from any service"
          exit 1
        fi
        
        echo "ip-address=$IP" >> $GITHUB_OUTPUT
        echo "✅ Detected IP address: $IP"
    
    - name: Manage Cloudflare IP access rule
      id: manage-rule
      shell: bash
      env:
        ACTION: ${{ inputs.action }}
        API_TOKEN: ${{ inputs.api-token }}
        ZONE_ID: ${{ inputs.zone-id }}
        IP_ADDRESS: ${{ inputs.ip-address || steps.get-ip.outputs.ip-address }}
        RULE_ID: ${{ inputs.rule-id }}
        MODE: ${{ inputs.mode }}
        NOTES: ${{ inputs.notes }}
        WAIT_TIME: ${{ inputs.wait-time }}
      run: |
        if [ -z "$API_TOKEN" ] || [ -z "$ZONE_ID" ]; then
          echo "❌ API token and Zone ID are required"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        create_rule() {
          echo "🔒 Creating Cloudflare IP access rule..."
          echo "   📍 IP: $IP_ADDRESS"
          echo "   🎯 Mode: $MODE"
          echo "   🌐 Zone: $ZONE_ID"
          
          PAYLOAD=$(cat <<EOF
        {
          "mode": "$MODE",
          "configuration": {
            "target": "ip",
            "value": "$IP_ADDRESS"
          },
          "notes": "$NOTES - GitHub Run: $GITHUB_RUN_ID"
        }
        EOF
        )
          
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/firewall/access_rules/rules" \
            -H "Authorization: Bearer $API_TOKEN" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions-Cloudflare-Manager/1.0" \
            --data "$PAYLOAD")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          if [ "$HTTP_CODE" -eq 200 ] && echo "$BODY" | grep -q '"success":true'; then
            RULE_ID=$(echo "$BODY" | grep -o '"id":"[^"]*"' | head -1 | sed 's/"id":"\([^"]*\)"/\1/')
            
            echo "rule-id=$RULE_ID" >> $GITHUB_OUTPUT
            echo "success=true" >> $GITHUB_OUTPUT
            
            echo "✅ Cloudflare rule created successfully!"
            echo "   🆔 Rule ID: $RULE_ID"
            
            if [ "$WAIT_TIME" -gt 0 ]; then
              echo "⏳ Waiting ${WAIT_TIME}s for Cloudflare propagation..."
              sleep "$WAIT_TIME"
              echo "✅ Propagation wait complete"
            fi
          else
            echo "❌ Failed to create Cloudflare rule"
            echo "   📊 HTTP Code: $HTTP_CODE"
            echo "   📄 Response: $BODY"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        }
        
        delete_rule() {
          echo "🗑️ Deleting Cloudflare IP access rule..."
          echo "   🆔 Rule ID: $RULE_ID"
          
          RESPONSE=$(curl -s -w "\n%{http_code}" -X DELETE \
            "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/firewall/access_rules/rules/$RULE_ID" \
            -H "Authorization: Bearer $API_TOKEN" \
            -H "User-Agent: GitHub-Actions-Cloudflare-Manager/1.0")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          if [ "$HTTP_CODE" -eq 200 ] && echo "$BODY" | grep -q '"success":true'; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "✅ Cloudflare rule deleted successfully"
          else
            echo "⚠️ Failed to delete Cloudflare rule"
            echo "   📊 HTTP Code: $HTTP_CODE"
            echo "   📄 Response: $BODY"
            echo "success=false" >> $GITHUB_OUTPUT
          fi
        }
        
        case "$ACTION" in
          "create")
            if [ -z "$IP_ADDRESS" ]; then
              echo "❌ IP address is required for create action"
              echo "success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            create_rule
            ;;
          "delete")
            if [ -z "$RULE_ID" ]; then
              echo "❌ Rule ID is required for delete action"
              echo "success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            delete_rule
            ;;
          *)
            echo "❌ Invalid action: $ACTION"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
            ;;
        esac